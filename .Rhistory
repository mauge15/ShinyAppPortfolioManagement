x5
x6=x5*x4
x6
l <- list(a=1:10,b=11:20)
l
data <- matrix(1:10,nrow=10)
data
apply(data,1,prod)
x4 <- sample(c(0.99,1.01), 100, replace=T)
x=c()
x[1]=100
for (i in 1:100)
{
x[i+1]=x[i]*x4[i]
}
x
plot(x)
x4 <- sample(c(0.99,1.01), 1000, replace=T)
x=c()
x[1]=100
for (i in 1:1000)
{
x[i+1]=x[i]*x4[i]
}
plot(x)
x4 <- sample(c(0.99,1.01), 1000, replace=T)
x=c()
x[1]=100
for (i in 1:1000)
{
x[i+1]=x[i]*x4[i]
}
plot(x)
plot(x,type="p")
plot(x,type="l",col="blue")
library("quantmod") # para obtener los datos de yahoo
365*15
getSymbols("^IBEX",from="2000-01-01",to=Sys.Date())
365*14
length(IBEX)
head(IBEX)
data = Ad(IBEX)
length(data)
head(data)
x4 <- sample(c(0.99,1.01), 3890, replace=T)
x=c()
x[1]=11610
for (i in 1:3890)
{
x[i+1]=x[i]*x4[i]
}
plot(x,type="l",col="blue")
plot(data,type="l",col="blue")
plot(data)
plot(data,main="")
head(plot)
head(data)
head(x)
plot(x)
plot(x,type="l")
x4 <- sample(c(0.99,1.01), 3890, replace=T)
x=c()
x[1]=11610
for (i in 1:3890)
{
x[i+1]=x[i]*x4[i]
}
plot(x,type="l")
x4 <- sample(c(0.99,1.01), 3890, replace=T)
x=c()
x[1]=11610
for (i in 1:3890)
{
x[i+1]=x[i]*x4[i]
}
plot(x,type="l")
x4 <- sample(c(0.99,1.01), 3890, replace=T)
x=c()
x[1]=11610
for (i in 1:3890)
{
x[i+1]=x[i]*x4[i]
}
plot(x,type="l")
x4 <- sample(c(0.99,1.01), 3890, replace=T)
x=c()
x[1]=11610
for (i in 1:3890)
{
x[i+1]=x[i]*x4[i]
}
plot(x,type="l")
x4 <- sample(c(0.99,1.01), 3890, replace=T)
x=c()
x[1]=11610
for (i in 1:3890)
{
x[i+1]=x[i]*x4[i]
}
plot(x,type="l")
x4 <- sample(c(0.99,1.01), 3890, replace=T)
x=c()
x[1]=11610
for (i in 1:3890)
{
x[i+1]=x[i]*x4[i]
}
plot(x,type="l")
x4 <- sample(c(0.99,1.01), 3890, replace=T)
x=c()
x[1]=11610
for (i in 1:3890)
{
x[i+1]=x[i]*x4[i]
}
plot(x,type="l")
x4 <- sample(c(0.99,1.01), 3890, replace=T)
x=c()
x[1]=11610
for (i in 1:3890)
{
x[i+1]=x[i]*x4[i]
}
plot(x,type="l")
x4 <- sample(c(0.99,1.01), 3890, replace=T)
x=c()
x[1]=11610
for (i in 1:3890)
{
x[i+1]=x[i]*x4[i]
}
plot(x,type="l")
x4 <- sample(c(0.99,1.01), 3890, replace=T)
x=c()
x[1]=11610
for (i in 1:3890)
{
x[i+1]=x[i]*x4[i]
}
plot(x,type="l")
x4 <- sample(c(0.99,1.01), 3890, replace=T)
x=c()
x[1]=11610
for (i in 1:3890)
{
x[i+1]=x[i]*x4[i]
}
plot(x,type="l")
install.packages("stringi")
install.packages("stringi")
install.packages("portfolio")
require("portfolio")
########################################
##
##  yahoo.R
##
##  Demonstration for downloading data from yahoo
##  using get.yahoo.data.R
##
####################################################
library(portfolio)
data(dow.jan.2005)
p <- new("portfolio", symbol.var = "symbol", data = dow.jan.2005)
## Gets additional data for the portfolio
p <- getYahooData(p, symbol.var = "symbol")
p@data
head(dow.jan.2005)
TickerList <- c(“T”, “GOOG”,”CSCO”, “MSFT”, “JNPR”)
TickerList <- c('T', "GOOG","CSCO", "MSFT", "JNPR")
for (Ticker in TickerList)
ClosingPricesRead <- cbind(ClosingPricesRead,
getSymbols.yahoo(Ticker, from=”1950-01-01″, verbose=FALSE, auto.assign=FALSE)[,6]) # [,6] = keep the adjusted prices
ClosingPricesRead <- NULL
for (Ticker in TickerList)
ClosingPricesRead <- cbind(ClosingPricesRead,
getSymbols.yahoo(Ticker, from="1950-01-01", verbose=FALSE, auto.assign=FALSE)[,6]) # [,6] = keep the adjusted prices
library(quantmod)
library(xts)
getSymbols(TickerList,src='yahoo')
getSymbols("CSCO",src='yahoo')
getSymbols("^GSPC",src='yahoo')
getSymbols("GOOG",src="yahoo")
library(UsingR)
data(galton)
library(reshape)
library(ggplot2)
data(diamond)
plot(diamond$carat,diamond$price, xlab="Mass (carats)",ylab="Prices (SIN $)",bg="lightblue",
col="black",cex=1.1, pch=21, frame=FALSE)
abline(fit, lw=2)
fit <- lm(price ~ carat,data=diamond)
abline(fit, lw=2)
x <- diamond$carat
y <- diamond$price
n <- length(x)
n
yhat <- predict(fit)
yhat
for (i in 1:n)
lines(c(x[i],x[i]), c(y[i], yhat[i]), col="red", lwd=2)
for (i in 1:n)
lines(c(x[i],x[i]), c(y[i], yhat[i]), col="red", lwd=2)
e <- resid(fit)
plot(x,e, xlab="Mass (carats)",ylab="Prices (SIN $)",bg="lightblue",
col="black",cex=1.1, pch=21, frame=FALSE)
abline(h=0, lw=2)
for (i in 1:n)
lines(c(x[i],x[i]), c(e[i], 0), col="red", lwd=2)
fit <- lm(price ~ 1,data=diamond)
plot(1,diamond$price)
fit
plot(fit)
plot(data$price)
plot(data$price,1)
plot(data$price,rep(1,length(data$price)))
plot(diamond$price,1)
plot(diamond$price,rep(1,length(diamond$price)))
plot(rep(1,length(diamond$price)),diamond$price)
abline(fit, lw=2)
plot(diamond$price,rep(1,length(diamond$price)))
abline(fit, lw=2)
abline(fit, lw=2)
plot(diamond$price,rep(1,length(diamond$price)))
fit <- lm(price ~ 1,data=diamond)
abline(fit, lw=2)
resid(fit)
fit <- lm(price ~ 1,data=diamond)
abline(fit, lw=2)
yhat <- predict(fit)
for (i in 1:n)
lines(c(1,1), c(y[i], yhat[i]), col="red", lwd=2)
head(y)
head(yhat)
fit <- lm(price ~ 1,data=diamond)
fit
e <- resid(fit)
head(e)
yhat <- predict(fit)
head(y)
head(yhat)
plot(diamond$price,diamond$carat)
plot(diamond$price,diamond$carat)
plot(diamond$carat,diamond$price)
head(diamond$price)
plot(1,diamond$price)
plot(rep(1,length(diamond$price)),diamond$price)
abline(fit, lw=5)
mean(diamond$price)
fit
yhat <- predict(fit)
for (i in 1:n)
lines(c(1,1), c(y[i], yhat[i]), col="red", lwd=2)
totalResiduosMedia <- sum(e)
totalResiduosMedia
temp <- diamond$price - mean(diamond$price)
head(temp)
sum(temp)
totalResiduosMedia
totalResiduosMedia <- sum(e^2)
fitOriginal <- lm(price ~ carat,data=diamond)
residuosRegresion <- resid(fitOriginal)
totalResiduosRegresion <- sum(residuosRegresion^2)
totalResiduosRegresion/totalResiduosMedia
1- (totalResiduosRegresion/totalResiduosMedia)
summary(fitOriginal)
library(UsingR)
data(father.son)
head(father.son)
x <- father.son$sheight
n <- length(x)
round(c(var(x),var(x)/n),sd(x),sd(x)/n)
round(c(var(x),var(x)/n),sd(x),sd(x)/n))
round(c(var(x),var(x)/n,sd(x),sd(x)/n))
round(c(var(x),var(x)/n,sd(x),sd(x)/n),2)
standardError <- sd(x)/n
library(datasets)
data(ChickWeight)
library(reshape2)
head(ChickWeight)
wideCW <- dcast(CkickWeight, Diet + Chick ~ Time, value.var="Weight")
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var="Weight")
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var="weight")
head(wideCW)
names(wideCW)
names(wideCW)[(-(1:2))]
names(wideCW)[(-(1:2))] <- paste("time",names(wideCW)[(-1:2)],sep="")
names(wideCW)[(-(1:2))] <- paste("time",names(wideCW)[(-(1:2)],sep="")
names(wideCW)[(-(1:2))] <- paste("time",names(wideCW)[(-(1:2))],sep="")
names(wideCW)
library(dplyr)
wideCW <- mutate ( wideCW, gain=time21-time0)
head(wideCW)
wideCW14 <- subset(wideCW, Diet %in% c(1,4))
head(wideCW14)
rbind(t.test(gain ~ Diet, paired=FALSE, var.equal=TRUE, data=wideCW14)$conf, t.test(gain ~ Diet, paired=FALSE, var.equal=FALSE, data=wideCW14)$conf)
data(father.son)
head(father.son)
nrow(father.son)
diff <- father.son$sheight-father.son$fheight
head(diff)
mean(diff)
library(quantmod)
library(Quandl)
library(PerformanceAnalytics)
library(zoo)
library(plyr)
require(gdata)
library(dplyr)
library(ggplot2)
library("twitteR")
library("ROAuth")
consumer_key <- "NVzwx8wpFYhEJsH0T0xEixGvf"
consumer_secret <- "7I8MbCq2LCb1hmsEHJbSolQvbYVKyR0nyDO93Ftot2tmnjieGK"
access_token <- "62368186-lMm2zdYidKKkl42NgzERPkMjZNfysiFQpL96crdik"
access_secret <- "8kkWv2wDyBFQjmAGR0teRFrdSWEPFkzN989JHhCBOcXZ3"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
tweets <- searchTwitter('#amazon', n=50)
head(tweets)
tweets <- searchTwitter('#amazon', n=5)
class(tweets)
res <- lapply(tweets, function(x){tags$li(x)})
library(shiny)
res <- lapply(tweets, function(x){tags$li(x)})
class(rea)
class(res)
head(res)
res
res[[1]]
res <- sapply(tweets, function(x){tags$li(x)})
res
x <- tags$li("Hola")
x
res <- sapply(tweets, function(x){return(tags$li(x))})
class(tweets)
tweets[1]
class(tweets[1])
class(tweets[[1]])
res <- sapply(tweets, function(x){return(tags$li(as.character(x))})
res <- sapply(tweets, function(x){return(tags$li(as.character(x)))})
as.character(tweets[[1]])
x <- tweets[[1]]
x
class(x)
runApp('Desktop/dashboard')
runApp('Desktop/dashboard')
runApp('Desktop/dashboard')
runApp('Desktop/dashboard')
runApp('Desktop/dashboard')
runApp('Desktop/dashboard')
runApp('Desktop/dashboard')
runApp('Desktop/dashboard')
runApp('Desktop/dashboard')
runApp('Desktop/dashboard')
library(shinydashboard)
library(shiny)
library(quantmod)
library(Quandl)
library(PerformanceAnalytics)
library(zoo)
library(plyr)
require(gdata)
library(dplyr)
library(ggplot2)
library("twitteR")
library("ROAuth")
loadPrices <- function(stocksData, startDate){
res <- dlply(stocksData, 1, function(x){generarDatos(x,startDate,progress)})
if ((length(res))>1) {
prices <- do.call(merge, lapply(res, function(x) x))
}else{
prices <- res[[1]]
}
prices <- na.locf(prices)
colnames(prices) <- gsub(".Adjusted","",colnames(prices))
return (prices)
}
leerYahoo <- function(ticker,fromDate)
{
r <- NULL
attempt <- 1
while( is.null(r) && attempt <= 20 ) {
attempt <- attempt + 1
try(
symb <- getSymbols(ticker,auto.assign=FALSE, src="yahoo", from=fromDate)
)
}
symb <- Cl(symb)
return(symb)
}
generarDatos <- function(stockData,fecha,progress){
print(paste("Consultando ",stockData))
# Increment the progress bar, and update the detail text.
#progress$inc(1/nrow(data), detail = paste("Downloading ", stockData$ticker))
ticker <- as.character(stockData$ticker)
currency <- as.character(stockData$currency)
if (ticker=="DGTL"){
stockPrices <- readDGTL(fecha)
}else{
r <- NULL
attempt <- 1
while( is.null(r) && attempt <= 20 ) {
attempt <- attempt + 1
try(
stockPrices <- getSymbols(ticker,auto.assign=FALSE, src="yahoo", from=fecha)
)
}
print(paste("Hay ",nrow(stockPrices),"datos"))
stockPrices <- Ad(stockPrices)
Sys.sleep(2)
}
if (!(stockData[2]=="EUR")){
return (stockPrices <- stockPrices[paste0(fecha,'::')]/Divisa[,currency][paste0(fecha,'::')])
}else{
return (stockPrices)
}
}
update <- FALSE
data <- read.csv("data.csv",header=TRUE,sep = ";",dec = ",",
colClasses=(c("character","character","numeric")))
colnames(data) <- c("ticker","currency","weight")
initValue <- 100000
if (update==TRUE){
EURUSD <- Quandl("ECB/EURUSD",start_date="2016-01-01",type="xts")
EURGBP <- Quandl("ECB/EURGBP",start_date="2016-01-01",type="xts")
Divisa <- cbind(EURUSD,EURGBP)
colnames(Divisa) <- c("USD","GBP")
benchmarkTicker <- "SPY"
startDate <- "2017-05-30"
prices <- loadPrices(data,startDate)
bench <- leerYahoo("SPY",startDate)
bench <- na.locf(bench)
allData <- merge(prices,bench)
allData <- allData[complete.cases(allData),]
write.csv(allData)
} else {
allData <- read.zoo("prueba.csv",index.column = 1, sep = " ", header = TRUE)
}
setwd("~/Desktop/dashboard")
update <- FALSE
data <- read.csv("data.csv",header=TRUE,sep = ";",dec = ",",
colClasses=(c("character","character","numeric")))
colnames(data) <- c("ticker","currency","weight")
initValue <- 100000
if (update==TRUE){
EURUSD <- Quandl("ECB/EURUSD",start_date="2016-01-01",type="xts")
EURGBP <- Quandl("ECB/EURGBP",start_date="2016-01-01",type="xts")
Divisa <- cbind(EURUSD,EURGBP)
colnames(Divisa) <- c("USD","GBP")
benchmarkTicker <- "SPY"
startDate <- "2017-05-30"
prices <- loadPrices(data,startDate)
bench <- leerYahoo("SPY",startDate)
bench <- na.locf(bench)
allData <- merge(prices,bench)
allData <- allData[complete.cases(allData),]
write.csv(allData)
} else {
allData <- read.zoo("prueba.csv",index.column = 1, sep = " ", header = TRUE)
}
head(allData)
prices <- allData[,(-ncol(allData))]
head(prices)
class(prices)
s <- lag(prices)
allData <- allData[complete.cases(allData),]
nrow(allData)
prices <- na.locf(allData[,(-ncol(allData))])
head(prices)
class(prices)
class(index(prices))
s <- lag(prices)
head(prices[,-1])
qxts <- as.xts(prices)
class(qxs)
class(qxts)
head(qxts)
s <- prices(qxts)
s <- lag(qxts)
lag <- stats::lag
s <- lag(qxts)
rets <- Return.calculate(qxts)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
head(rets)
returns <- rets[(-1),]
head(returns)
prueba <- Return.cumulative(returns)
prueba
prueba
prueba*100
round(prueba*100,2)
shiny::runApp()
rets
head(Rets)
head(rets)
head(returns)
cum <- Return.cumulative(returns)
cum
library(tidyr)
gather(cum,key = "stock",value = "return")
gather(cum,key = "stock",value = "return",1:·)
gather(cum,key = "stock",value = "return",1:3)
class(cum)
cumdf <- as.data.frame(cum)
cumdf
gather(cum,key = "stock",value="return")
gather(cumdf ,key = "stock",value="return")
